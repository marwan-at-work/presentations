#+theme=black

#### SLIDE #####
################################################################################

The Go Download Protocol

23 August 2018

Marwan Sulaiman (github.com/marwan-at-work)
The New York Times

#### SLIDE #####
################################################################################

* Go 1.11 introduces native dependency managmenet

- Yay.

#### SLIDE #####
################################################################################

* TL;DR

- No external tool to manage dependencies
- Node.js has NPM
- Ruby has Bundler
- Rust has Cargo
- Go has...Go

#### SLIDE #####
################################################################################

* There are already many talks about this, short and long:

.link https://research.swtch.com/vgo - Original Proposal (https://research.swtch.com/vgo)
.link https://www.youtube.com/watch?v=6MbIzJmLz6Q - Paul Jolly - What are Go modules and how do I use them?
.link https://talks.godoc.org/github.com/rogpeppe/talks/modules.talk/modules.slide - Roger Peppe - Go modules 
.link https://roberto.selbach.ca/intro-to-go-modules - Roberto Selbach - Introduction to Go Modules
.link https://www.youtube.com/watch?v=F8nrpe0XWRg - Russ Cox - Go With Versions

#### SLIDE #####
################################################################################

* Today, I'll focus on one part of the proposal: 

- The Download Protocol


#### SLIDE #####
################################################################################

* TL;DR

- Go Get, Dep, and all previous Go dependency managers used VCS.
- Go Modules uses VCS by default,
- But it can now use an HTTP protocol when GOPROXY is set to a URL. 

#### SLIDE #####
################################################################################

* Why is that good? 

- Logic
- Access Control 
- Immutability 
- Performance

_It_takes_10_seconds_to_download_the_CockroachDB_source_tree_as_a_zip_file_from_GitHub_but_almost_four_minutes_to_git_clone_it_ -- [Vgo Proposal]


#### SLIDE #####
################################################################################

* The contract

- GET _baseURL/{module}/@v/list_ 

- GET _baseURL/{module}/@v/{version}.info_ 

- GET _baseURL/{module}/@v/{version}.mod_ 

- GET _baseURL/{module}/@v/{version}.zip_ 

- GET _baseURL/{module}/@latest_ 


#### SLIDE #####
################################################################################

* How does it do it? 

.code ./ex1/main.go


#### SLIDE #####
################################################################################

* Before 1.11

    $ go get
    $ go build

- Your program is built with the following dependency:
    package github.com/pkg/errors
    branch: master
    commit: 816c9085562cd7ee03e7f8188a1cfd942858cded

#### SLIDE #####
################################################################################

* After 1.11 (with modules enabled)

    $ go mod init myprogram
    $ GO111MODULE=on GOPROXY=http://myproxyserver.com go build

- Your program is built with the following dependency:
    package github.com/pkg/errors
    tag: v0.8.0


#### SLIDE #####
################################################################################

* How? 

- 1. Go would like to see all the tags associated with pkg/errors.

    GET baseURL/{module}/@v/list
    Becomes
    GET baseURL/github.com/pkg/errors/@v/list

Returns 

    v0.8.0
    v0.7.1
    v0.7.0
    v0.6.0
    v0.5.1
    v0.5.0
    v0.4.0
    v0.3.0
    v0.2.0
    v0.1.0

#### SLIDE #####
################################################################################

* How? 

- 2. Go would like to know more about v0.8.0
    GET baseURL/{module}/@v/{version}.info 
    Becomes
    GET baseURL/github.com/pkg/errors/@v/v0.8.0.info

Returns

    {
        "Version":"v0.8.0",
        "Time":"2016-09-29T01:48:01Z"
    }

#### SLIDE #####
################################################################################

* How?

- 3. Go would like the source code for v0.8.0

    GET baseURL/{module}/@v/{version}.zip
    Becomes
    GET baseURL/github.com/pkg/errors/@v/v0.8.0.zip

Returns

    <github.com/pkg/errors code base wrapped in a zip file>

- All paths begin with the module path and version
    github.com/pkg/errors@v0.8.0/LICENSE
    github.com/pkg/errors@v0.8.0/README.md
    github.com/pkg/errors@v0.8.0/errors.go
    ...

#### SLIDE #####
################################################################################

* How?

- 4. Go asks for the dependencies of your dependencies

    GET baseURL/{module}/@v/{version}.mod
    Becomes
    GET baseUR/github.com/pkg/errors/@v/v0.8.0.mod

- Server returns go.mod file 

    module github.com/pkg/errors

    require (
        github.com/sirupsen/logrus v1.0.6
    )

.caption * _sirupsen/logrus_is_not_a_real_dependency_of_pkg/errors_

#### SLIDE #####
################################################################################

* What about non semver repos? 

- A lot of Go libraries have no tags
- Or tagged but not with semantic versioning. 

.code ./ex2/main.go

#### SLIDE #####
################################################################################

* Similar process, different results.

- 1. GET /github.com/marwan-at-work/gdp/@v/list

    ...

- 2. GET /github.com/marwan-at-work/gdp/@latest

    {
        "Version": "v0.0.0-20180802153652-841e60f0c1ca",
        "Time": "2018-08-02T15:36:52Z"
    }

#### SLIDE #####
################################################################################

* Pseudo Versions

- v0.0.0-20180802153652-841e60f0c1ca
- Has three parts split by the `-` character.
- 1. v0.0.0-
- 2. Timestamp.
- 3. Commit hash.

#### SLIDE #####
################################################################################

* The rest is business as usual:

- GET /github.com/marwan-at-work/gdp/@v/v0.0.0-20180802153652-841e60f0c1ca.info
- GET /github.com/marwan-at-work/gdp/@v/v0.0.0-20180802153652-841e60f0c1ca.mod
- GET /github.com/marwan-at-work/gdp/@v/v0.0.0-20180802153652-841e60f0c1ca.zip


#### SLIDE #####
################################################################################

* Should you care?


#### SLIDE #####
################################################################################

* A Global Proxy

.image ./athens.png 500 _


#### SLIDE #####
################################################################################

* What is Athens? 

- A Download Protocol Implementation
- A Global Proxy / A Module CDN
- A Private Proxy
- Open Source!
- Not For Profit

#### SLIDE #####
################################################################################

* What is Athens? 

- The best of both worlds:
- The simplicity of only pushing to Code Hosting Sites (github, bitbucket etc)
- The assurances and benefits of a proxy server (immutability, access, etc)

#### SLIDE #####
################################################################################

* How does it work? 


.image ./athens-diagram.png 500 _


#### SLIDE #####
################################################################################

* Terminology

- Private Proxy: Proxy
- Public Proxy: Olympus
- Public/Private Storage: storage.Backend



#### SLIDE #####
################################################################################

* Storage Implementations

- GCP Cloud Storage
- Azure Blob Storage
- AWS S3 
- MongoDB 
- Minio
- FS/mem


#### SLIDE #####
################################################################################

* Demo


#### SLIDE #####
################################################################################

* Links

- https://github.com/gomods/athens
- #athens on the Gophers Slack
- http://docs.gomods.io/
- https://medium.com/@arschles
- https://talks.bjk.fyi/golanguk18.html