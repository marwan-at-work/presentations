#+theme=black

#### SLIDE #####
################################################################################

Build Your Own Go CI Server
18:00 20 September 2017

Marwan Sulaiman - github.com/marwan-at-work

Developer

# Hello everyone! My name is Marwan

#### SLIDE #####
################################################################################

* Overview

- What is CI/CD?

- Why do you want it?

- How do you do it?


#### SLIDE #####
################################################################################

* What is Continuous Integration?

_[it]_ _is_ _the_ _practice_ _of_ _merging_ _all_ _developer_ _working_ _copies_ _to_ _a_ _shared_ _*mainline*_ _several_ _times_ _a_ _day_

-Wikipedia



# So let's look at a somewhat official definition that is technically probably more correct than my definition, but makes less sense to the audience.

#### SLIDE #####
################################################################################

* What is Continuous Integration?

_it_ _is_ _automated_ _building/testing_ _of_ _your_ _repository's_ _pull_ _request_ _so_ _you_ _merge_ _with_ _more_ _confidence_

-Me


#### SLIDE #####
################################################################################

* Set the Scene


#### SLIDE #####
################################################################################

* Your new repo just got popular

.image ./star.png 500 _

#### SLIDE #####
################################################################################

* You get a pull request

.image ./pr.jpg 500 _


#### SLIDE #####
################################################################################

* Deceptively friendly green button alert:

.image ./merge.png 200 _

#### SLIDE #####
################################################################################

* Two things must happen before merge.

1. You review the code (done by you).

2. Check out the pull request commit, build/run the tests (done by someone/something else).


#### SLIDE #####
################################################################################

* Like a good citizen, you review code.

.image ./pr.png 500 _

#### SLIDE #####
################################################################################

* Someone/Something Else Running The Tests

.image ./checks.png 500 _


#### SLIDE #####
################################################################################

* The flow:

.image ./graph.png 500 _


#### SLIDE #####
################################################################################

* Why have a CI? 

- Impractical to manually build/test every pull request.
- Near-impossible to build/test in various environments (differnet Go versions, different OS's).
- Catch bugs, errors, and regressions before merging to master.
- Report useful information to the contributor (i.e. signing a CLA).


#### SLIDE #####
################################################################################

* Why build your own CI? 

- Customization
- Granularity
- Curiosity.

#### SLIDE #####
################################################################################

* How do I do it? 

#### SLIDE #####
################################################################################

* Webhooks

.image ./webhook.png 500 _

# add ngrok url.

# open a pull request. 

# watch it all happen.


#### SLIDE #####
################################################################################

* ngrok

    ./ngrok http 3000

.image ./ngrok.png 450 _


#### SLIDE #####
################################################################################

* CI Server

    package main

    import "net/http"

    func main() {
        http.HandleFunc("/webhook", webhookHandler)

        http.ListenAndServe(":3000", nil)
    }

    func webhookHandler(w http.ResponseWriter, r *http.Request) {...}

# Who here has built a simple web server in Go? So you can see there's nothing special about it.

#### SLIDE #####
################################################################################
* Helper packages

    // github client and webhook parser.
    import "github.com/google/go-github/github"

    // git implementation in Go
    import "gopkg.in/src-d/go-git.v4" 

    // library to issue docker requests
    import "github.com/docker/docker/client"

#### SLIDE #####
################################################################################

* webhookHandler

    import "github.com/google/go-github/github"

    func webhookHandler(w http.ResponseWriter, r *http.Request) {

        // func ValidatePayload(r *http.Request, secretKey []byte) (payload []byte, err error)
        payload, err := github.ValidatePayload(r, []byte("supersecret"))
        if err != nil {
            fmt.Fprintln(w, err)
            return
        }

        ...
    }

#### SLIDE #####
################################################################################

* webhookHandler() - cont'd

    func webhookHandler(w http.ResponseWriter, r *http.Request) {
        ...

        // func ParseWebHook(messageType string, payload []byte) (interface{}, error)
        event, err := github.ParseWebHook(github.WebHookType(r), payload)
        if err != nil {
            fmt.Fprintln(w, err)
            return
        }

        ...
    }

#### SLIDE #####
################################################################################

* webhookHandler() - cont'd

    func webhookHandler(w http.ResponseWriter, r *http.Request) {
        ...

        switch pre := event.(type) {
        case *github.PullRequestEvent:
            action := pre.GetAction()
            if action == "opened" || action == "reopened" || action == "synchronize" {
                err = buildPR(pre)
                ...
            }
        default:
            fmt.Fprintf(w, "Uninteresting event: %T\n", event)
            return
        }
    }



#### SLIDE #####
################################################################################

* buildPR()
    func buildPR(pre *github.PullRequestEvent) error {
        status := "pending"
        reportStatus(status, pre *github.PullRequestEvent)

        ...
    }

.image ./pending.png 

#### SLIDE #####
################################################################################

* reportStatus()

    import "golang.org/x/oauth2"

    func reportStatus(status string, pre *github.PullRequestEvent) {
        ts := oauth2.StaticTokenSource(&oauth2.Token{AccessToken: os.Getenv("GITHUB_TOKEN")})
        tc := oauth2.NewClient(oauth2.NoContext, ts)
        c := github.NewClient(tc)

        owner := pre.PullRequest.Head.Repo.Owner.GetLogin()
        repoName := pre.PullRequest.Head.Repo.GetName()
        ref := pre.PullRequest.Head.GetSHA()

        // func (s *RepositoriesService) CreateStatus(ctx context.Context, owner, repo, ref string, status *RepoStatus) (*RepoStatus, *Response, error)
        c.Repositories.CreateStatus(context.Background(), owner, repoName, ref, &github.RepoStatus{
            State: &status,
        })
    }

#### SLIDE #####
################################################################################

* buildPR() - clone the repository

    func buildPR(pre *github.PullRequestEvent) error {
        ...

        pathToRepo, err := cloneRepo(pre)
        if err != nil {
            return err
        }
        defer os.RemoveAll(pathToRepo)

        ...
    }


#### SLIDE #####
################################################################################

* cloneRepo() - create a temp directory

    func cloneRepo(pre *github.PullRequestEvent) (string, error) {
        ...

        repoName := pre.PullRequest.Head.Repo.GetName()
        tempDir, err := ioutil.TempDir("", repoName) // tempDir == "/var/jXei/T/repoName-fxjso"
        if err != nil {
            return "", err
        }

        ...
    }


#### SLIDE #####
################################################################################

* cloneRepo() - clone the repo

    import "gopkg.in/src-d/go-git.v4"
    import "gopkg.in/src-d/go-git.v4/plumbing"

    func cloneRepo(pre *github.PullRequestEvent) (string, error) {
        ...

        cloneURL := pre.PullRequest.Head.Repo.GetCloneURL()
        branchName := pre.PullRequest.Head.GetRef()

        repo, err := git.PlainClone(tempDir, false, &git.CloneOptions{
            URL:               gitURL,
            Progress:          os.Stdout,
            RecurseSubmodules: git.DefaultSubmoduleRecursionDepth,
            ReferenceName:     plumbing.ReferenceName(fmt.Sprintf("refs/heads/%v", branchName)),
        })
        if err != nil {
            return "", err
        }

        ... 
    }

#### SLIDE #####
################################################################################

* cloneRepo() - checkout the pull-request commit

    func cloneRepo(pre *github.PullRequestEvent) (string, error) {
        ...

        wt, err := repo.Worktree()
        if err != nil {
            return "", err
        }

        commitSha := pre.PullRequest.Head.GetSHA()
        err = wt.Checkout(&git.CheckoutOptions{
            Hash: plumbing.NewHash(commitSha),
        })
        if err != nil {
            return "", err
        }

        return tempDir, nil
    }


#### SLIDE #####
################################################################################

* buildPR() - build the Dockerfile inside the repo.

    func buildPR(pre *github.PullRequestEvent) error {
        ...

        err = buildImage(pathToRepo)

        return err
    }


#### SLIDE #####
################################################################################

* buildImage() - create a docker client.

    import docker "github.com/docker/docker/client"

    func buildImage(repoDir string) error {
        c, err := docker.NewEnvClient()
        if err != nil {
            return err
        }

        ...
    }

#### SLIDE #####
################################################################################

* buildImage() - tar up the whole repo.

    import "github.com/docker/docker/pkg/archive"

    func buildImage(repoDir string) error {
        ...

        buildCtx, err := archive.TarWithOptions(repoDir, &archive.TarOptions{
            Compression: archive.Uncompressed,
        })
        if err != nil {
            return errors.Wrap(err, "could not create build context")
        }
        defer buildCtx.Close()

        ...
    }


#### SLIDE #####
################################################################################

* buildImage() - send the tar to the Docker daemon.

    import "github.com/docker/docker/pkg/archive"

    func buildImage(repoDir string) error {
        ...

        resp, err := c.ImageBuild(ctx, buildCtx, types.ImageBuildOptions{
            Dockerfile: "./Dockerfile",
            Tags:       []string{"built_by_my_ci"},
        })
        if err != nil {
            return errors.Wrap(err, "could not send image build request")
        }

        ...
    }


#### SLIDE #####
################################################################################

* buildImage() - send the tar to the Docker daemon.

    import "github.com/docker/docker/pkg/jsonmessage"
    import "github.com/docker/docker/pkg/term"

    func buildImage(repoDir string) error {
        ...

        fd, isTerm := term.GetFdInfo(os.Stdout)
        err = jsonmessage.DisplayJSONMessagesStream(resp.Body, os.Stdout, fd, isTerm, nil)

        return err
    }


#### SLIDE #####
################################################################################

* webhookHandler() - cont'd

    func webhookHandler(w http.ResponseWriter, r *http.Request) {
        ...

        switch pre := event.(type) {
        case *github.PullRequestEvent:
            action := pre.GetAction()
            if action == "opened" || action == "reopened" || action == "synchronize" {
                err = buildPR(pre)
                status := "success"
                if err != nil {
                    status = "error"
                }

                reportStatus(status, pre *github.PullRequestEvent)
            }
        default:
            fmt.Fprintf(w, "Uninteresting event: %T", event)
            return
        }
    }

#### SLIDE #####
################################################################################

* RECAP

- We get a webhook request.

- We parse the payload to get all the info we need about the pull request.

- We clone the repo to a temp directory

- We cd into that repo && `docker build` it.

- report back to github success/failure.


#### SLIDE #####
################################################################################

* Demo 🤞

#### SLIDE #####
################################################################################

* One Last, Important, Missing Piece.

#### SLIDE #####
################################################################################

* TargetURL

.image ./checks2.png 500 _

#### SLIDE #####
################################################################################

* TargetURL

.image ./targeturl.png 500 _

#### SLIDE #####
################################################################################

* TargetURL

    func reportStatus(status string, pre *github.PullRequestEvent) {
        ...

        link := "https://www.my-ci-server.com/logs?id=123"

        c.Repositories.CreateStatus(context.Background(), owner, repoName, ref, &github.RepoStatus{
            State: &status,
            TargetURL: &link, // a link to this particular build logs. 
        })
    }


#### SLIDE #####
################################################################################

* io.Writer 💝

    repo, err := git.PlainClone(tempDir, false, &git.CloneOptions{
        URL:               gitURL,
        Progress:          os.Stdout, // io.Writer <----
        RecurseSubmodules: git.DefaultSubmoduleRecursionDepth,
        ReferenceName:     plumbing.ReferenceName(fmt.Sprintf("refs/heads/%v", branchName)),
    })

    err = jsonmessage.DisplayJSONMessagesStream(
        resp.Body,
        os.Stdout, // io. Writer <----
        fd,
        isTerm,
        nil,
    )

#### SLIDE #####
################################################################################

* io.Writer implemented

    // Handles logs logic of a build process
    type Logger struct {
        ID  string
        URL string
    }

    // implement the io.Writer
    func (l *Logger) Write(p []byte) (int, error) {
        persistToDB(l.ID, p)
        
        logToTerminal(l.ID, p)
        
        tweetIt(l.ID, p)

        sendItToMyMom(l.ID, p)

        return len(p), nil
    }

#### SLIDE #####
################################################################################

* io.Writer used

    myLogger: &Logger{ID: id}

    repo, err := git.PlainClone(tempDir, false, &git.CloneOptions{
        URL:               gitURL,
        Progress:          myLogger, // io.Writer <----
        RecurseSubmodules: git.DefaultSubmoduleRecursionDepth,
        ReferenceName:     plumbing.ReferenceName(fmt.Sprintf("refs/heads/%v", branchName)),
    })

    err = jsonmessage.DisplayJSONMessagesStream(
        resp.Body,
        myLogger, // io. Writer <----
        fd,
        isTerm,
        nil,
    )

#### SLIDE #####
################################################################################

* Demo 2 🤞🤞🤞


#### SLIDE #####
################################################################################

* Conclusion

- Go shines in this domain.

- Get creative about your development cycle. 

- Also, checkout github.com/marwan-at-work/baghdad